/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.actions;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.dbUtil.DBUtil;
import com.forms.AccountHistoryForm;
import com.forms.Accountant1Form;
import com.forms.AccountantForm;


public class Accountant1Action extends DispatchAction {
	
	public ActionForward display(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		Accountant1Form accountant1Form = (Accountant1Form) form;// TODO Auto-generated method stub
		System.out.println("control in display");
		HttpSession session = request.getSession();

		 String com=(String) session.getAttribute("companyname");
			 
		 accountant1Form.setUnit(com);
		Connection con = DBUtil.openConnection();
		ResultSet rs = null;
		Statement stmt = con.createStatement();
		
		
		
		if(com.equalsIgnoreCase("IngroInfo Software Solutions pvt ltd."))
        { 
			String Sql = "SELECT * FROM ACCOUNTANT WHERE SLNO LIKE 'Acc_I%' ORDER BY SLNO DESC";
			rs = stmt.executeQuery(Sql);
		int count = 1;
		int count1 = 1;
		while (rs.next()) {
			 String oldVersion = rs.getString("SLNO");
			 String version = oldVersion; 
			 System.out.println("string"+version);	
				count++;
		    String[] splitString = version.split("-");
		    System.out.println("String is"+splitString[0]);
		    System.out.println("int"+splitString[1]);
		   /*String[] split = splitString[0].split("~"); 
		    System.out.println("String is"+split);*/

		    //int newVersion = Integer.valueOf(splitString[1])+1;
		    count1=count;
		}
           int newVersion = count1++;
		 String completeNewVersion = "Acc_IGI-" + newVersion;
		    System.out.print(completeNewVersion);
		    accountant1Form.setSlno(completeNewVersion);
        }
        else {
        	String Sql = "SELECT * FROM ACCOUNTANT WHERE SLNO LIKE 'Acc_R%' ORDER BY SLNO DESC";
			rs = stmt.executeQuery(Sql);
    		int count = 1;
    		int count1 = 1;
    		while (rs.next()) {
    			 String oldVersion = rs.getString("SLNO");
    			 String version = oldVersion; 
    			 System.out.println("string"+version);
    		 
    				
    				count++;
    		    String[] splitString = version.split("-");
    		    System.out.println("String is"+splitString[0]);
    		    System.out.println("int"+splitString[1]);
    		   /*String[] split = splitString[0].split("~"); 
    		    System.out.println("String is"+split);*/

    		    //int newVersion = Integer.valueOf(splitString[1])+1;
    		    count1=count;
    		}
               int newVersion = count1++;
    		 String completeNewVersion = "Acc_RK-" + newVersion;
    		    System.out.print(completeNewVersion);
    		    accountant1Form.setSlno(completeNewVersion);
		}
		return mapping.findForward("display");

	}
	
	public ActionForward account12(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		Accountant1Form accountant1Form = (Accountant1Form) form;// TODO Auto-generated method stub
	
		System.out.println("inside method");
		
		HttpSession session = request.getSession();
		try {
			// file upload
			// FileUploadForm fileUploadForm = (FileUploadForm)form;
			FormFile file = accountant1Form.getFile();
			
			System.out.println("file---------------"+file);
			// Get the servers upload directory real path name
			// String filePath=getServlet().getServletContext().getRealPath("/")
			// +"upload";
			String filePath = "C:\\OASW\\ACCOUNT";
			// create the upload folder if not exists
			File folder = new File(filePath);
			if (!folder.exists()) {
				folder.mkdirs();
			}
			String fileName = file.getFileName();
			String extension[] = fileName.split("\\.");
			// System.out.println(extension.length
			// +"----------------------------------------");
			if (extension.length != 1) {
				String getExtension = extension[1];
				if (!("").equals(fileName)) {
					System.out.println("Server path:" + filePath);
					File newFile = new File(filePath, fileName);
					try {
						if (!newFile.exists()) {
							FileOutputStream fos = new FileOutputStream(newFile);
							fos.write(file.getFileData());
							fos.flush();
							fos.close();
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				
					String app = "FILE";
					newFile.renameTo(new File("C:\\OASW\\ACCOUNT\\"  + accountant1Form.getSlno() +  "." + getExtension));
					request.setAttribute("uploadedFilePath", newFile.getAbsoluteFile());
					request.setAttribute("uploadedFileName", newFile.getName());
				}
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String slno = accountant1Form.getSlno();
		String date = accountant1Form.getDate();
		String particulars = accountant1Form.getParticulars();
		String invoice = accountant1Form.getInvoice();
		String for1 = accountant1Form.getFor1();
		String credit = accountant1Form.getCredit();
		String remarks = accountant1Form.getRemarks();
		String paymode=accountant1Form.getPaymode();
		String unit=accountant1Form.getUnit();
		String year=accountant1Form.getYear();
		
		
		System.out.println("slno "+slno+" date "+date+" particulars "+particulars+" invoice number "+invoice+" pay for "+for1+" pay mode is "+paymode+" Credit "+credit+" remarks "+remarks +" unit is "+unit +"YEAR"+year);
		
		Connection con = DBUtil.openConnection();
		Statement stmt = con.createStatement();
		ResultSet rs=null;
		 String Sql1 = "SELECT * FROM ACCOUNTANT ORDER BY ID ASC";
			rs = stmt.executeQuery(Sql1);
			int count2 = 1;
			int count3 = 1;
			while (rs.next()) {
				 String oldVersion = rs.getString("ID");
				 String version = oldVersion; 
				 System.out.println("string"+version);
			 
					
					count2++;
					 count3=count2;
					 
			}
			int num = count3++;
			
		    System.out.print(num);
		    DateFormat dateFormat1 = new SimpleDateFormat("MM");
			Date date1 = new Date();
			String str1 = dateFormat1.format(date1);
		System.out.println("DDDD"); 
		String sql = "INSERT INTO ACCOUNTANT VALUES('"+slno+"',TO_DATE('"+date+"','DD/MM/YYYY'),'"+particulars+"','"+invoice+"','"+for1+"','"+paymode+"','"+credit+"','"+remarks+"','"+unit+"','"+year+"','"+num+"','"+str1+"')";
		stmt.executeUpdate(sql);
		
		
		
		request.setAttribute("msg"," data inserted successfully ");
		System.out.println("hiiiiiiiiiiiiii");
		
		
		
         System.out.println("HELLOOOOOOOOOOOOOOOO");
		 String com=(String) session.getAttribute("companyname");

		if(com.equalsIgnoreCase("IngroInfo Software Solutions pvt ltd."))
        { 
			String Sql = "SELECT * FROM ACCOUNTANT WHERE SLNO LIKE 'Acc_I%' ORDER BY SLNO DESC";
			rs = stmt.executeQuery(Sql);
		int count = 1;
		int count1 = 1;
		while (rs.next()) {
			 String oldVersion = rs.getString("SLNO");
			 String version = oldVersion; 
			 System.out.println("string"+version);	
				count++;
		    String[] splitString = version.split("-");
		    System.out.println("String is"+splitString[0]);
		    System.out.println("int"+splitString[1]);
		   /*String[] split = splitString[0].split("~"); 
		    System.out.println("String is"+split);*/

		    //int newVersion = Integer.valueOf(splitString[1])+1;
		    count1=count;
		}
           int newVersion = count1++;
		 String completeNewVersion = "Acc_IGI-" + newVersion;
		    System.out.print(completeNewVersion);
		    accountant1Form.setSlno(completeNewVersion);
        }
        else {
        	String Sql = "SELECT * FROM ACCOUNTANT WHERE SLNO LIKE 'Acc_R%' ORDER BY SLNO DESC";
			rs = stmt.executeQuery(Sql);
    		int count = 1;
    		int count1 = 1;
    		while (rs.next()) {
    			 String oldVersion = rs.getString("SLNO");
    			 String version = oldVersion; 
    			 System.out.println("string"+version);
    		 
    				
    				count++;
    		    String[] splitString = version.split("-");
    		    System.out.println("String is"+splitString[0]);
    		    System.out.println("int"+splitString[1]);
    		   /*String[] split = splitString[0].split("~"); 
    		    System.out.println("String is"+split);*/

    		    //int newVersion = Integer.valueOf(splitString[1])+1;
    		    count1=count;
    		}
               int newVersion = count1++;
    		 String completeNewVersion = "Acc_RK-" + newVersion;
    		    System.out.print(completeNewVersion);
    		    accountant1Form.setSlno(completeNewVersion);
		}
        accountant1Form.setDate("");
		accountant1Form.setParticulars("");
		accountant1Form.setInvoice("");
		accountant1Form.setPaymode("");
		accountant1Form.setRemarks("");
		accountant1Form.setCredit("");
        DBUtil.closeStatement(stmt);
		DBUtil.closeConnection(con);
		
		
		return mapping.findForward("display");
	}	
	
	
	public ActionForward show5(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Accountant1Form account = (Accountant1Form) form;

		HttpSession session = request.getSession();
		Connection con = DBUtil.openConnection();
		ResultSet rs = null;
		Statement stmt = null;
		String Sql = "SELECT * FROM ACCOUNTANT";
		ArrayList a = new ArrayList();

		try {
			stmt = con.createStatement();
			rs = stmt.executeQuery(Sql);
			while (rs.next()) {
				AccountantForm ac=new AccountantForm();
				ac.setSlno1(rs.getString(1));
				ac.setDate1(rs.getString(2));
				ac.setParticulars1(rs.getString(3));
				ac.setInvoice1(rs.getString(4));
				ac.setFor12(rs.getString(5));
				ac.setAmount1(rs.getString(6));
				ac.setCredit1(rs.getString(7));
				ac.setRemarks1(rs.getString(8));
				
				a.add(ac);
			}
			rs.close();
			stmt.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("empmaster", a);
		
		System.out.println(a);
		return mapping.findForward("display");
	}
	public ActionForward historydisplay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Accountant1Form accountant1Form = (Accountant1Form) form;
		
		String fromdate=accountant1Form.getFromdate();
		String todate=accountant1Form.getTodate();
		String unit1=accountant1Form.getUnit1();
		
		System.out.println("from date is "+fromdate+" to date is  "+todate+"unit is "+unit1);

		HttpSession session = request.getSession();
		Connection con = DBUtil.openConnection();
		ResultSet rs = null;
		Statement stmt = null;
		String Sql = "SELECT * FROM ACCOUNTANT WHERE (UNIT='"+unit1+"') AND (DATEOF BETWEEN '"+fromdate+"' AND '"+todate+"')";
		ArrayList a = new ArrayList();

		try {
			stmt = con.createStatement();
			rs = stmt.executeQuery(Sql);
			while (rs.next()) {
				Accountant1Form ad=new Accountant1Form();
				ad.setSlno1(rs.getString(1));
				ad.setDate1(rs.getString(2));
				ad.setParticulars1(rs.getString(3));
				ad.setInvoice1(rs.getString(4));
				ad.setFor12(rs.getString(5));
				ad.setAmount1(rs.getString(6));
				ad.setCredit1(rs.getString(7));
				ad.setRemarks1(rs.getString(8));
				ad.setUnit2(rs.getString(9));
				ad.setYear1(rs.getString(10));
				a.add(ad);
			}
			rs.close();
			stmt.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("empmaster", a);
		return mapping.findForward("display");
	}
	
}

