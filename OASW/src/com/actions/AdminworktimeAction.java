/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.actions;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

import com.crystaldecisions.reports.reportdefinition.SetTextCommand;
import com.dbUtil.DBUtil;
import com.forms.AdminworktimeForm;
import com.forms.DailyreportForm;
import com.forms.WorkingtimeForm;

public class AdminworktimeAction extends DispatchAction {

	public ActionForward display(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		AdminworktimeForm adminworktimeForm = (AdminworktimeForm) form;
		HttpSession session = request.getSession();
		String com = (String) session.getAttribute("companyname");
		ArrayList al = (ArrayList) session.getAttribute("empDetails");
		String username = (String) al.get(1);
		adminworktimeForm.setUser(username);
		adminworktimeForm.setUser1(username);
		Connection con = DBUtil.openConnection();
		Statement stmt = con.createStatement();
		Statement stmt1 = con.createStatement();
		Statement stmt2 = con.createStatement();

		/*
		 * DateFormat dateFormat3 = new SimpleDateFormat("dd/MM/yyyy");
		 * 
		 * Calendar cal = Calendar.getInstance(); cal.add(Calendar.DATE, -1);
		 * 
		 * String ydate = dateFormat3.format(cal.getTime());
		 * System.out.println("YESTERDAY DATE "+ydate);
		 */

		String user = adminworktimeForm.getUser1();

		String name = (String) session.getAttribute("userName");
		String password = (String) session.getAttribute("password");
		String str2 = "SELECT EMP_ID FROM EMPLOYEES WHERE USERNAME = '" + name
				+ "' AND PASS_WORD = '" + password + "' AND UNIT = '" + com
				+ "' ORDER BY USERNAME ASC";
		ResultSet rs1 = stmt1.executeQuery(str2);
		System.out.println("rs is" + rs1);
		if (rs1.next()) {

			adminworktimeForm.setEmpid(rs1.getString("EMP_ID"));
		}

		String id = adminworktimeForm.getEmpid();
		System.out.println("id is" + id);

		DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");

		Date date = new Date();
		String str = dateFormat.format(date);
		DateFormat dateFormat1 = new SimpleDateFormat("dd/MM/yyyy");
		Date date1 = new Date();
		String str11 = dateFormat1.format(date1);
		String sql1 = "SELECT * FROM WORKTIME WHERE TOTIME IS NOT  NULL  AND STARTTIME IS NOT NULL AND UNIT ='"
				+ com
				+ "' AND CURRENTDATE = TO_DATE('"
				+ str11
				+ "','DD/MM/YYYY') AND EMPID='" + id + "' ";
		int t = stmt1.executeUpdate(sql1);
		System.out.println("===========================");
		System.out.println("t value is" + t);
		if (t > 0) {
			System.out.println("123456");
			adminworktimeForm.setStarttime("");
			adminworktimeForm.setTotime("");
		} else {
			adminworktimeForm.setTotime(str);
		}
		String sql3 = "SELECT * FROM WORKTIME WHERE STARTTIME IS NOT NULL AND EMPID = '"
				+ id
				+ "' AND UNIT = '"
				+ com
				+ "' AND CURRENTDATE = TO_DATE('"
				+ str11 + "','DD/MM/YYYY')";
		int P = stmt2.executeUpdate(sql3);
		System.out.println("===========================");
		System.out.println("p value is" + P);
		if (P > 0) {
			System.out.println("123456");

			adminworktimeForm.setStarttime("");

		} else {
			adminworktimeForm.setStarttime(str);
		}

		return mapping.findForward("display");
	}
	
	public ActionForward generatereport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		AdminworktimeForm dailyreportForm = (AdminworktimeForm) form;// TODO Auto-generated method stub
		System.out.println(".............dailyreportForm :"+dailyreportForm);
		HttpSession session = request.getSession();
		 String com=(String) session.getAttribute("companyname");
		String slno = dailyreportForm.getEmpid();
		String name = dailyreportForm.getName();
		/*String desg = dailyreportForm.getDesgn();*/
		String fdate = dailyreportForm.getStarttime();
		String tdate = dailyreportForm.getTotime();
		System.out.println(".............prrrrrr");
		String  reportQuerry="";
		String  reportFname="";
		/*String daily = dailyreportForm.getDaily();
		if (daily.equalsIgnoreCase("attendance")) 
		{*/
               if (slno.equalsIgnoreCase("all")) 
               {
		
    reportQuerry = "SELECT * FROM WORKTIME WHERE  STARTTIME IS NOT NULL AND CURRENTDATE BETWEEN TO_DATE('"+fdate+"','DD/MM/YYYY') AND TO_DATE('"+tdate+"','DD/MM/YYYY') AND UNIT ='"+com+"' ORDER BY  EMPID ASC";
	System.out.println("report query "+reportQuerry);
    reportFname="dailyReport1.rpt";
	dailyreportForm.setReportShow("YES");
	session.setAttribute("query", reportQuerry);
	session.setAttribute("report", reportFname);
	session.setAttribute("showRep", "showRep");
		      }
               
else 
{	reportQuerry = "SELECT * FROM WORKTIME WHERE STARTTIME IS NOT NULL AND CURRENTDATE BETWEEN TO_DATE('"+fdate+"','DD/MM/YYYY') AND TO_DATE('"+tdate+"','DD/MM/YYYY') AND UNIT ='"+com+"' AND USERNAME ='"+name+"' ORDER BY  EMPID ASC";
		reportFname="dailyReport1.rpt";
		dailyreportForm.setReportShow("YES");
		session.setAttribute("query", reportQuerry);
		session.setAttribute("report", reportFname);
		session.setAttribute("showRep", "showRep");
}
/*}
		else  {
			if (slno.equalsIgnoreCase("all")) {
				reportQuerry = "SELECT * FROM WORKTIME WHERE CURRENTDATE BETWEEN TO_DATE('"+fdate+"','DD/MM/YYYY') AND TO_DATE('"+tdate+"','DD/MM/YYYY') AND UNIT ='"+com+"' ORDER BY  EMPID ASC ";			
				reportFname="timeReport1.rpt";
				dailyreportForm.setReportShow("YES");
				session.setAttribute("query", reportQuerry);
				session.setAttribute("report", reportFname);
				session.setAttribute("showRep", "showRep");
					}
			else {		
					reportQuerry = "SELECT * FROM WORKTIME WHERE CURRENTDATE BETWEEN TO_DATE('"+fdate+"','DD/MM/YYYY') AND TO_DATE('"+tdate+"','DD/MM/YYYY') AND TOTIME IS NOT NULL AND UNIT ='"+com+"' AND USERNAME ='"+name+"' ORDER BY  EMPID ASC";
					reportFname="timeReport1.rpt";
					dailyreportForm.setReportShow("YES");
					session.setAttribute("query", reportQuerry);
					session.setAttribute("report", reportFname);
					session.setAttribute("showRep", "showRep");
			}
		} */
	
		return mapping.findForward("displayTimeReport");

	}

	public ActionForward displayrecords(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		AdminworktimeForm dailyreportForm = (AdminworktimeForm) form;// TODO Auto-generated method stub
		{		

	        System.out.println("inside action class");

			Connection con1 = DBUtil.openConnection();

		
		        System.out.println("inside action class");
				System.out.println("connection1------"+con1);
			 
			     Statement stmt1 = (Statement) con1.createStatement();
					String slno = dailyreportForm.getEmpid();

			        String sql1 = "Select USERNAME From WORKTIME WHERE EMPID = '"+slno+"'";
			       
			        ResultSet rs1 = stmt1.executeQuery(sql1);
			        if(rs1.next()) {
						
			
			        dailyreportForm.setName(rs1.getString("USERNAME"));
			        
			        
		   
			        }
		     
		     
		return mapping.findForward("displayTimeReport");
		}
	}
	
	public ActionForward displayTimeReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
				
		AdminworktimeForm adminworktimeForm = (AdminworktimeForm) form;
		HttpSession session = request.getSession();
		String com = (String) session.getAttribute("companyname");
		ArrayList al = (ArrayList) session.getAttribute("empDetails");
		
		Connection con = DBUtil.openConnection();
		Statement stmt = (Statement) con.createStatement();
	      
        String sql = "Select EMP_ID From EMPLOYEES WHERE UNIT = '"+com+"' ORDER BY EMP_ID ASC";
       
        ResultSet rs = stmt.executeQuery(sql);
        ArrayList<String> List1 = new ArrayList<String>();
        while (rs.next()) {

            List1.add(rs.getString("EMP_ID"));
            
      }
        if( List1!=null){
         System.out.println("inside if");
         session.setAttribute("plist",  List1);
        }
		
		
		
		
		
		adminworktimeForm.setUnit(com);
		
		return mapping.findForward("displayTimeReport");
	}

	public ActionForward sendwork(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		AdminworktimeForm workingtimeForm = (AdminworktimeForm) form;
		HttpSession session = request.getSession();
		System.out.println("control in display");
		String com = (String) session.getAttribute("companyname");
		String name = (String) session.getAttribute("userName");
		String password = (String) session.getAttribute("password");
		DateFormat dateFormat1 = new SimpleDateFormat("dd/MM/yyyy");
		Date date1 = new Date();
		String str = dateFormat1.format(date1);
		DateFormat dateFormat2 = new SimpleDateFormat("MM");
		Date date2 = new Date();
		String month = dateFormat2.format(date2);
		System.out.println("month is " + month);
		String starttime = workingtimeForm.getStarttime();
		String user = workingtimeForm.getUser();
		Connection con = DBUtil.openConnection();
		Statement stmt = con.createStatement();
		Statement stmt1 = con.createStatement();
		String str1 = "SELECT EMP_ID FROM EMPLOYEES WHERE USERNAME = '" + name
				+ "' AND PASS_WORD = '" + password + "' AND UNIT = '" + com
				+ "' ORDER BY USERNAME ASC";
		ResultSet rs = stmt1.executeQuery(str1);
		System.out.println("rs is" + rs);
		if (rs.next()) {

			workingtimeForm.setEmpid(rs.getString("EMP_ID"));
		}

		String id = workingtimeForm.getEmpid();
		System.out.println("id is" + id);

		String sql1 = "SELECT * FROM WORKTIME WHERE STARTTIME IS NOT NULL AND EMPID = '"
				+ id
				+ "' AND UNIT = '"
				+ com
				+ "' AND CURRENTDATE = TO_DATE('"
				+ str + "','DD/MM/YYYY') ";
		int t = stmt1.executeUpdate(sql1);
		System.out.println("===========================");
		System.out.println("t value is" + t);
		if (t > 0) {
			System.out.println("123456");

			workingtimeForm.setStarttime("");

		} else {

			System.out.println("--------------");
			String sql = "UPDATE WORKTIME SET STARTTIME = '" + starttime
					+ "',CURRENTMONTH  = '" + month + "' WHERE EMPID = '" + id
					+ "' AND CURRENTDATE = TO_DATE('" + str + "','DD/MM/YYYY')";
			System.out.println("SQL IS" + sql);

			stmt.executeUpdate(sql);

			System.out.println("00000000000");
			request.setAttribute("msg", " data inserted successfully");
			workingtimeForm.setStarttime("");
		}
		return mapping.findForward("display");
	}

	public ActionForward senddetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, ParseException {
		AdminworktimeForm workingtimeForm = (AdminworktimeForm) form;
		String totime = workingtimeForm.getTotime();
		String user = workingtimeForm.getUser1();
		String stime = "";
		Connection con = DBUtil.openConnection();
		HttpSession session = request.getSession();
		String com = (String) session.getAttribute("companyname");
		String name = (String) session.getAttribute("userName");
		String password = (String) session.getAttribute("password");
		DateFormat dateFormat2 = new SimpleDateFormat("MM");
		Date date2 = new Date();
		String month = dateFormat2.format(date2);
		System.out.println("month is " + month);
		DateFormat dateFormat1 = new SimpleDateFormat("dd/MM/yyyy");
		Date date1 = new Date();
		String str = dateFormat1.format(date1);
		ResultSet rs = null;
		Statement stmt = con.createStatement();
		System.out.println("--------------"); 
		Statement stmt1 = con.createStatement();
		String str1 = "SELECT EMP_ID FROM EMPLOYEES WHERE UNIT = '" + com
				+ "' AND USERNAME = '" + name + "' AND PASS_WORD = '"
				+ password + "'";
		ResultSet rs1 = stmt1.executeQuery(str1);
		System.out.println("rs is" + rs);
		if (rs1.next()) {
			workingtimeForm.setEmpid(rs1.getString("EMP_ID"));
		} 
		
		String id = workingtimeForm.getEmpid();
		System.out.println("id is" + id);
		
		String sql1 = "SELECT * FROM WORKTIME WHERE  UNIT ='" + com
				+ "' AND EMPID = '" + id
				+ "' AND TOTIME IS NOT NULL  AND CURRENTDATE = TO_DATE('" + str
				+ "','DD/MM/YYYY')";
		int t = stmt1.executeUpdate(sql1);
		System.out.println("===========================");
		System.out.println("t value is" + t);
		if (t > 0) {
			System.out.println("123456");

			workingtimeForm.setTotime("");
			return mapping.findForward("display");

		} else {
			String sql2 = "SELECT STARTTIME FROM  WORKTIME WHERE CURRENTDATE = TO_DATE('"
					+ str
					+ "','DD/MM/YYYY') AND UNIT = '"
					+ com
					+ "' AND EMPID ='" + id + "'";
			ResultSet rs3 = stmt.executeQuery(sql2);

			if (rs3.next()) {
				stime = rs3.getString("STARTTIME");

				System.out.println("starttime is  " + stime);
			}
         
			String st = stime;
			String tt = totime;
			SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");

			Date d1 = null; 
			Date d2 = null; 

			d1 = format.parse(st);
			d2 = format.parse(tt);

			// in milliseconds
			long diff = d2.getTime() - d1.getTime();
			System.out.println(diff);
			long diffSeconds = diff / 1000 % 60;
			long diffMinutes = diff / (60 * 1000) % 60;
			long diffHours = diff / (60 * 60 * 1000) % 24;
			long diffDays = diff / (24 * 60 * 60 * 1000);
			String time = diffHours + ":" + diffMinutes + ":" + diffSeconds;
			System.out.println(time);

			String sql = "UPDATE WORKTIME SET STARTTIME = '" + stime
					+ "', TOTIME = '" + totime + "',TOTALTIME='" + time
					+ "',PRESENT_ABSENT ='Present' WHERE EMPID = '" + id
					+ "' AND CURRENTDATE = TO_DATE('" + str + "','DD/MM/YYYY')";
			stmt.executeUpdate(sql);
			System.out.println("00000000000");
			request.setAttribute("msg", " data inserted successfully");
			workingtimeForm.setTotime("");
			return mapping.findForward("display");
		} 

	}
	
	

	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException {
		AdminworktimeForm workingtimeForm = (AdminworktimeForm) form;
		HttpSession session = request.getSession();
		String com = (String) session.getAttribute("companyname");
		String name = (String) session.getAttribute("userName");
		String password = (String) session.getAttribute("password");
		DateFormat dateFormat1 = new SimpleDateFormat("dd/MM/yyyy");
		Date date1 = new Date();
		String str = dateFormat1.format(date1);
		String user1 = workingtimeForm.getUser();

		Connection con = DBUtil.openConnection();
		ResultSet rs = null;
		ResultSet rs1 = null;
		Statement stmt = null;
		Statement stmt1 = null;
		Statement stmt11 = con.createStatement();
		String str1 = "SELECT EMP_ID FROM EMPLOYEES WHERE UNIT = '" + com
				+ "' AND USERNAME = '" + name + "' AND PASS_WORD = '"
				+ password + "'";
		ResultSet rs11 = stmt11.executeQuery(str1);
		System.out.println("rs is" + rs);
		if (rs11.next()) {

			workingtimeForm.setEmpid(rs11.getString("EMP_ID"));
		}

		String id = workingtimeForm.getEmpid();
		System.out.println("id is" + id);
		String Sql = "SELECT STARTTIME FROM WORKTIME WHERE EMPID = '" + id
				+ "'  AND UNIT ='" + com + "' AND CURRENTDATE = TO_DATE('"
				+ str + "','DD/MM/YYYY') ORDER BY STARTTIME ASC";
		ArrayList a = new ArrayList();
		WorkingtimeForm wf = null;
		stmt = con.createStatement();
		rs = stmt.executeQuery(Sql);
		if (rs.next()) {
			wf = new WorkingtimeForm();
			wf.setStime(rs.getString("STARTTIME"));

			String Sql1 = "SELECT TOTIME FROM WORKTIME WHERE EMPID = '" + id
					+ "'  AND UNIT ='" + com + "' AND CURRENTDATE = TO_DATE('"
					+ str + "','DD/MM/YYYY') ORDER BY TOTIME ASC";
			stmt11 = con.createStatement();
			rs11 = stmt11.executeQuery(Sql1);
			if (rs11.next()) {
				wf.setName(rs11.getString("TOTIME"));
			}

			a.add(wf);
		}

		rs.close();
		stmt.close();
		con.close();
		request.setAttribute("displaymanag", a);
		return mapping.findForward("display");
	}
}